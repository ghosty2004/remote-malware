import { WebSocket } from 'ws';
import { randomUUID } from 'node:crypto';
import Methods from './Methods';

export default class ClientManager {
    public handler: WebSocket;
    public remoteAddress: string;

    private procHandlers: Array<{
        uniqueId: string;
        resolve: (value: any) => void
    }> = [];

    constructor(handler: WebSocket, remoteAddress: string) {
        this.handler = handler;
        this.remoteAddress = remoteAddress;
        this.handler.on('message', (data) => {
            const { eventName, uniqueId, args, procValue }: { eventName: string, uniqueId: string, args: any[], procValue?: any } = JSON.parse(data.toString());
            
            if(eventName === 'procReturn' && typeof(procValue) !== 'undefined') {
                const index = this.procHandlers.findIndex(f => f.uniqueId === uniqueId);
                if(index === -1) return;
                this.procHandlers[index].resolve(procValue);
                this.procHandlers.splice(index, 1);
            }
        });
    }

    call(eventName: string, ...args: any[]) {
        const uniqueId = randomUUID();
        this.handler.send(Methods.eventParser(eventName, uniqueId, args, 'default'));
    }

    callProc(eventName: string, ...args: any[]): Promise<any> {
        return new Promise(resolve => {
            const uniqueId = randomUUID();
            this.procHandlers.push({ uniqueId, resolve });
            this.handler.send(Methods.eventParser(eventName, uniqueId, args, 'proc'))
        })
    }

    shutdown() {
        this.call("shutdown");
    }

    restart() {
        this.call("restart");
    }

    setVolume(volume: number) {
        this.call("set_volume", volume / 100);
    }

    getVolume(): Promise<number> {
        return this.callProc("get_volume");
    }

    takeScreenshot(): Promise<Buffer> {
        return new Promise(async resolve => {
            const base64: string = await this.callProc("take_screenshot");
            resolve(Buffer.from(base64, "base64"));
        });
    }

    getName(): Promise<string> {
        return this.callProc("get_name");
    }

    openProcess(...args: any[]): Promise<number> {
        return this.callProc("open_process", ...args);
    }

    killProcess(pid: number) {
        this.call("kill_process", pid);
    }

    emulateKeyCombination(key: string) {
        this.call("emulate_key_combination", key);
    }
};