import { WebSocketServer } from 'ws';
import ClientManager from './ClientManager';
import Methods from './Methods';

export default class WebsocketManager {
    public handler: WebSocketServer;
    public debugEnabled = false;
    public clients: Array<ClientManager> = [];

    constructor(host: string, port: number, debugEnabled = false) {
        this.handler = new WebSocketServer({ host, port });
        this.debugEnabled = debugEnabled;

        this.handler.on('connection', (ws) => {
            //@ts-ignore
            const remoteAddress: string = ws._socket.remoteAddress;

            this.clients?.push(new ClientManager(ws, remoteAddress));

            if (this.debugEnabled)
                Methods.sendLog(`\`[Websocket]:\` from \`${remoteAddress}\` established.`)

            ws.on('close', () => {
                if (this.debugEnabled)
                    Methods.sendLog(`\`[Websocket]:\` from \`${remoteAddress}\` disconnected.`);

                const index = this.clients?.findIndex(f => f.handler === ws);
                if(index !== -1 && typeof(index) !== 'undefined')
                    this.clients?.splice(index, 1);
            });
        });
    }
};