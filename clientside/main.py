from asyncio import run
from websockets.legacy.client import connect
from json import loads, dumps
from win32api import GetUserName
from base64 import b64encode
from io import BytesIO
from pyscreenshot import grab as ImageGrab
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import subprocess

server_uri = "ws://127.0.0.1:8080/"

class WebsocketManager:
    def __init__(self):
        self.event_handlers = {}
        self.websocket: connect

    async def connect_websocket(self):
        async with connect(server_uri) as websocket:
            self.websocket = websocket
            while True:
                event = await websocket.recv()
                event_data = loads(event)
                if event_data['eventName'] in self.event_handlers:
                    event_unique_id = event_data['uniqueId']
                    event_args = event_data['args']
                    event_type = event_data['type']
                    try:
                        event_handler = self.event_handlers[event_data['eventName']];
                        if(event_type == event_handler['type']):
                            if event_handler['type'] == "default":
                                await self.event_handlers[event_data['eventName']]['handler'](event_args)
                            elif event_handler['type'] == "proc":
                                value = await self.event_handlers[event_data['eventName']]['handler'](event_args)
                                await websocket.send(dumps({
                                    "eventName": "procReturn",
                                    "uniqueId": event_unique_id,
                                    "procValue": value
                                }))
                    except Exception as e:
                        print(f"Error while executing event handler {event_data['eventName']}: {e}")

    def listen_event(self):
        def decorator(func):
            self.event_handlers[func.__name__] = {
                "handler": func,
                "type": "default"
            }
            return func
        return decorator

    def listen_proc_event(self):
        def decorator(func):
            self.event_handlers[func.__name__] = {
                "handler": func,
                "type": "proc"
            }
            return func
        return decorator

    async def emit_remote_event(self, event_name: str, args: list = []):
        await self.websocket.send(dumps({
            "eventName": event_name,
            "args": args
        }))

websocket_manager = WebsocketManager()

@websocket_manager.listen_event()
async def set_volume(args: list):
    volume_level = args[0]
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    volume.SetMasterVolumeLevelScalar(volume_level, None)

@websocket_manager.listen_proc_event()
async def get_volume(args: list):
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    return volume.GetMasterVolumeLevelScalar() * 100

@websocket_manager.listen_proc_event()
async def get_name(args: list):
    return GetUserName();

@websocket_manager.listen_proc_event()
async def take_screenshot(args: list):
    screenshot = ImageGrab()
    image_bytes = BytesIO()
    screenshot.save(image_bytes, format='PNG')
    encoded_string = b64encode(image_bytes.getvalue())
    return encoded_string.decode()

@websocket_manager.listen_proc_event()
async def open_process(args: list):
    process = subprocess.Popen(args)
    return process.pid

@websocket_manager.listen_event()
async def kill_process(args: list):
    subprocess.run(['taskkill', '/F', '/PID', str(args[0])])

async def main():
    await websocket_manager.connect_websocket()

run(main())